using KataProjectEuler.Interface;
using System;
using System.Threading;


/*EN
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    
    What is the value of the first triangle number to have over five hundred divisors?

 RU
 Последовательность номеров треугольников генерируется путем сложения натуральных чисел. Таким образом, число 7-го треугольника будет 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 Первые десять слагаемых будут: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     Перечислим факторы первых семи треугольных чисел:
    1:  1
    3:  1,3
    6:  1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    Мы можем видеть, что 28 - это первое число треугольника, имеющее более пяти делителей.
    
    Каково значение первого треугольного числа, имеющего более пятисот делителей?
 */
namespace KataProjectEuler.Problems
{
    class _012_HighlyDivisibleTriangularNumber : IProblemResult
    {
        private const int DIVISORS = 500;    //количество делителей будем искать
        private long TriangleNumberSum = 0;    //число триугольника
        private long CurrentNumberTriangle = 0;
        private long CountDivisior = 0;    
        private long SumTriangl = 0;    
        public void GetResult()
        {
            long countDivisorsFromNumber = 100000;//int.MaxValue;
            Console.WriteLine("Начало работы программы");
            ShowThreadInfo();
            int SumNumberTriangle = 0;
            for (int i = 0; i < countDivisorsFromNumber; i++)
            {
                SumNumberTriangle += i;
                if(SumNumberTriangle % 2==0)
                ThreadPool.QueueUserWorkItem(Worker, new ParamTr { numberTriangl = i, SumNumberTriangle = SumNumberTriangle });
            }
            for (int i = 0; i < 1000; i++)
            {
                if (TriangleNumberSum > 0)
                    break;
                ShowThreadInfo();
                Console.WriteLine($"Обработан триугольник №{CurrentNumberTriangle}, сумма триуголника - {SumTriangl}, колличество делителей - {CountDivisior}");
                Thread.Sleep(1000);
            }
            ShowThreadInfo();
            Console.WriteLine("END работы программы");

            
        }
        private void Worker(Object state)
        {
            var cl = (ParamTr)state;
            long numberTiangl = cl.SumNumberTriangle;
            long countDivisors = DIVISORS;
            CurrentNumberTriangle = cl.numberTriangl;
            for (long i = 1; i < numberTiangl; i++)
            {
                if (numberTiangl % i == 0)
                {
                    countDivisors--;
                    if (countDivisors == 0)
                    {
                        TriangleNumberSum = numberTiangl;
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine($"                            SumNumberTriangle {numberTiangl}    number triugol - {cl.numberTriangl}        -   -   -   -   -   -   -   -   -   -   -   -");
                        return;
                    }

                }
                if (TriangleNumberSum > 0)
                    break;
            }
            SumTriangl = numberTiangl;
            CountDivisior = DIVISORS- countDivisors;
        }
        static void ShowThreadInfo()
        {
            int availableWorkThreads, availableIOThreads, maxWorkThreads, maxIOThreads;
            ThreadPool.GetAvailableThreads(out availableWorkThreads, out availableIOThreads);
            ThreadPool.GetMaxThreads(out maxWorkThreads, out maxIOThreads);
            Console.WriteLine("-------------Доступно рабочих потоков в пуле:{0} из {1}", availableWorkThreads, maxWorkThreads);
            Console.WriteLine("-------------Доступно потоков ввода-вывода в пуле:{0} из {1}\n", availableIOThreads, maxIOThreads);
        }

    }
    class ParamTr
    {
        public int numberTriangl { get; set; }
        public int SumNumberTriangle { get; set; }
    }
}
/*№12375 - 76576500
 * Congratulations, the answer you gave to problem 12 is correct.
    You are the 217010th person to have solved this problem.
    This problem had a difficulty rating of 5%. The highest difficulty rating you have solved remains at 5%. 
    Return to Problems page.
 */
