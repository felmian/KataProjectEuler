using KataProjectEuler.Interface;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
/*EN
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    
    What is the value of the first triangle number to have over five hundred divisors?

 RU
 Последовательность номеров треугольников генерируется путем сложения натуральных чисел. Таким образом, число 7-го треугольника будет 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 Первые десять слагаемых будут: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     Перечислим факторы первых семи треугольных чисел:
       1: 1
      3: 1,3
      6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    Мы можем видеть, что 28 - это первое число треугольника, имеющее более пяти делителей.
    
    Каково значение первого треугольного числа, имеющего более пятисот делителей?
 */
namespace KataProjectEuler.Problems
{
    class _012_HighlyDivisibleTriangularNumber : IProblemResult
    {
        private const int DIVISORS = 5;    //количество делителей будем искать
        public void GetResult()
        {
            long countDivisorsFromNumber = GetDivisors(DIVISORS);
            Console.WriteLine($"countDivisorsFromNumber {countDivisorsFromNumber}");
            long TriangleNumber = 1;
            long countDivisors = DIVISORS;
            long SumNumberTriangle = 1;    //число триугольника
            long numberTiangl = 0;       //номер триугольника
            while (countDivisors > 0)
            {
                //Console.WriteLine($"SumNumberTriangle {SumNumberTriangle}. kol delitel {countDivisors}");

                numberTiangl += SumNumberTriangle;

                for (long i = 1; i < numberTiangl; i++)
                {
                    if (SumNumberTriangle % i == 0)
                    {
                        //      Console.WriteLine($"[{TriangleNumber}] {i}");
                        countDivisors--;
                        if (countDivisors == 0)
                        {
                            Console.WriteLine($"SumNumberTriangle {SumNumberTriangle}");
                            return;
                        }

                    }
                }
                if (countDivisors == 0)
                    break;

                //   Console.WriteLine($"SumNumberTriangle {SumNumberTriangle}. kol delitel {countDivisors}");

                countDivisors = DIVISORS;
                TriangleNumber++;
                SumNumberTriangle += TriangleNumber;

            }
            Console.WriteLine($"numberTiangl {numberTiangl}");
            Console.WriteLine($"SumNumberTriangle {SumNumberTriangle}");
            Console.WriteLine($"TriangleNumber {TriangleNumber}");
        }

        private long GetDivisors(int dIVISORS)
        {
            long result = 1;
            for (long i = 1; i <= dIVISORS; i++)
            {
                result *= i;
            }
            return result;
        }
    }
}
